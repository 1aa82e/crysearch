CrySearch application TODO list by evolution536

------------------------------------------------------------------
Package:
- Update resource.h with new version number;
- SDK headers;
- CrySearchXX.lib file;
- Update wiki with changes for the release.
------------------------------------------------------------------

- Is there a bug that I cannot search for pointers?
- Is there a bug that I cannot search for increased stuff properly?
- From memory dissection, if row is of type pointer, right click to create new dissection at that address;
- Use thread computing power more efficient?
	- Workers are fired off and then pull work from a pool of pages?
- Continue BeaEngine development (make it vectorized and stuff);
- Change semantics of (W)string next scan to search 'inside' any current search result?
- Fix header (like LordPE does, virtual dump);
- Also blocks for the values and using compression/encoding to reduce size?
- Current way of disassembling may cause inconsistencies;
	- different disassembler, capstone?
	- Temporarely fixed by 1 thread.
- Still need to fix shitloads of stuff in the import table parser, sanity checks missing everywhere;
- Bug in import table parser, x64, when switching from slack to winamp!
- Guessing for pointer can be done by checking whether it is inside a memory page of the process?
- Provide the output window / menu bar entry (PLUGIN_WANTS_OUTPUT_TAB);
- Track control flow of entire process and build it a tree!

- Debugger:
	- Software bp not correctly removed in Far Cry;
	- 16-byte registers during snapshot?
	- VEH debugger

- Structure dissections:
	- type guessing;
	- data schema (smth like xsd but for memory dissections);
	- generate struct definition from selection;

- Identify static addresses:
	- Generate C++ Fields / Struct / Union;
	- Expand to be used with pointers, maybe structs;

- Opening PDB files to navigate through disassembly with symbols, or just view symbols?

- Disassembler:
	- Follow unconditional jumps (draw arrow to the left of the disasm if in same page);

- Plugin system:
	- Plugin-events that are generated by plugins;
	- auto deploy correct plugins to build dir?
	- Plugin DLL to override process opening sequence; (maybe other templates)
	- Plugins have access to a menu in-app;

- VTable finder / dissection (learn_more, maybe a plugin);
- Find class instances based on a vtable;
- Dump .NET modules?
- Detect handles that are 'malicious'?
- Allow entering string as argument for create thread (let's make a custom data type of it);

- Main window:
	- Use right toolbar space for message queue:
		- Warning messages:
			- PE Headers may be destroyed (process open);
			- Executable module of process was hidden, undefined behavior;
			- Plugin(s) failed to load;
		- Info messages:
			- Could be anything...

- Winsock analysis, debugging packages sent/received;
- Pointer scan;

- Module window:
	- Manual mapper for x86 and x64;
	- QueueUserAPC;
	- ntdll.dll proces injection (LdrLoadDll,LdrpLoadDll).

- Scan for hooked functions inside a process based on:
	- Detours;
	- IAT.
	
- Code caves scanning;
- Write x86 driver using WinDDK (.sys) and create UI module to load it:
	- OpenProcess driver level equivalent;
	- Read/Write- ProcessMemory driver level equivalent;
	- TerminateThread driver level equivalent;
