CrySearch application TODO list by evolution536

------------------------------------------------------------------
Package:
- Update resource.h with new version number;
- SDK headers;
- CrySearchXX.lib file;
- Update wiki with changes for the release.
------------------------------------------------------------------

- Packed applications testen voor bugs!
- Debug version!
- Pointer scan;
- Data structure for value files with size of contiguous area?
- Save space with the saving of disassembly lines;
- Fix header (like LordPE does, virtual dump);
- Also blocks for the values and using compression/encoding to reduce size?
- Guessing for pointer can be done by checking whether it is inside a memory page of the process?
- Provide the output window / menu bar entry (PLUGIN_WANTS_OUTPUT_TAB);
- Track control flow of entire process and build it a tree (profiling)!

- Debugger:
	- 16-byte registers during snapshot?
	- VEH debugger

- Structure dissections:
	- data schema (smth like xsd but for memory dissections);
	- generate struct from selection / give start address and descriptions?

- Identify static addresses:
	- Generate C++ Fields / Struct / Union;
	- Expand to be used with pointers, maybe structs;

- Opening PDB files to navigate through disassembly with symbols, or just view symbols?

- Disassembler:
	- Follow unconditional jumps (draw arrow to the left of the disasm if in same page);

- Plugin system:
	- Plugin-events that are generated by plugins;
	- auto deploy correct plugins to build dir?
	- Plugins have access to a menu in-app;

- VTable finder / dissection (learn_more, maybe a plugin);
- Find class instances based on a vtable;
- Dump .NET modules?
- Allow entering string as argument for create thread (let's make a custom data type of it);

- Winsock analysis, debugging packages sent/received;

- Module window:
	- Manual mapper for x86 and x64;
	- QueueUserAPC;
	- ntdll.dll proces injection (LdrLoadDll,LdrpLoadDll).

- Scan for hooked functions inside a process based on:
	- Detours;
	- IAT.

- Write x86 driver using WinDDK (.sys) and create UI module to load it:
	- OpenProcess driver level equivalent;
	- Read/Write- ProcessMemory driver level equivalent;
	- TerminateThread driver level equivalent;
