CrySearch application TODO list by evolution536

------------------------------------------------------------------
Package:
- SDK headers;
- CrySearchXX.lib file;
- Update wiki with changes for the release;
------------------------------------------------------------------

- Improve SDK documentation, see learn_more's notes;
- Post-dump (plugin operations) event in plugins!!!
- Provide the output window / menu bar entry (PLUGIN_WANTS_OUTPUT_TAB);
- IAT window isn't that perfect in UI stuff;
- Find import function in window (button on top)?
- Splitter offset on the right size, I think the border is 3D!
- I think the way imports are saved needs some optimization!!!
- Debugger window (stack / registers) resolve addresses to relative/apis;
- More icons for actions in the designated toolbars!!!

- Debugger:
	- Disabling bp's doesn't always work yet;
	- Software bp not correctly removed in Far Cry;
	- page protection when hwbp???
	- Data breakpoint still not 100% set back, JUMP instructions wreck the lookup :D
		- JMP <const>
		- CALL <const>
		- JMP <reg>
	- 16-byte registers during snapshot?
	- VEH debugger

- Structure dissections:
	- type guessing;
	- data schema (smth like xsd but for memory dissections);
	- generate struct definition from selection;

- There is a bug in the process selection window when fooling around with non-responsive processes;
- Also a bug in the main window complaining about GUI locking (hard to reproduce);

- Identify static addresses:
	- Code generation customized to use offsets;
		- Pointers as addresses (using offsets);
	- Generate C++ Fields / Struct / Union;
	- Expand to be used with pointers, maybe structs;

- Opening PDB files to navigate through disassembly with symbols, or just view symbols?
- Scan for value in between;

- Disassembler:
	- Resolve function calls in disasm to IAT functions;
	- Follow unconditional jumps (draw arrow to the left of the disasm if in same page);

- Plugin system:
	- Plugin-events that are generated by plugins;
	- MASM SDK for plugins;
	- auto deploy correct plugins to build dir?
	- Plugin DLL to override process opening sequence; (maybe other templates)
	- Plugins have access to a menu in-app;

- VTable finder / dissection (learn_more, maybe a plugin);
- Find class instances based on a vtable;
- Callstack tree, 'Code Map' as in Visual Studio;
- Dump .NET modules?
- Cancel IO on application shutdown when huge scan is still running (XP support blocks me here);
- Detect handles that are 'malicious'?
- Brute-force PID's to find out about hidden processes (detect hidden processes);
- Allow entering string as argument for create thread (let's make a custom data type of it);
- Indicate architecture in process list;

- Heartbeat system for evading AC;
- Main window:
	- Use right toolbar space for message queue:
		- Warning messages:
			- PE Headers may be destroyed (process open);
			- Executable module of process was hidden, undefined behavior;
			- Plugin(s) failed to load;
		- Info messages:
			- Could be anything...

- Encryption in target process & hide CrySearch from signature scan
	- Look at AesStream example in bazaar;
	- Metamorphic code.

- Memory Scanner:
	- Scan for a custom data type, a C structure;
	- Import structs from ReClass;

- Winsock analysis, debugging packages sent/received;
- Pointer scan;

- Module window:
	- Manual mapper for x86 and x64;
	- QueueUserAPC;
	- ntdll.dll proces injection (LdrLoadDll,LdrpLoadDll).

- Code generation:
	- Configure Microsoft Visual C++ compiler to compile generated code?

- Scan for hooked functions inside a process based on:
	- Detours;
	- IAT.
	
- Code caves scanning;
- Write x86 driver using WinDDK (.sys) and create UI module to load it:
	- OpenProcess driver level equivalent;
	- Read/Write- ProcessMemory driver level equivalent;
	- TerminateThread driver level equivalent;

------------------------------------------------------------------------------------------------

Additions to U++:

Add this to the CoWork class:

	void SetThreadPriority(const int Priority)
	{
		Array<Thread>& thpPool = this->pool().threads;
		
		switch (Priority)
		{	
			case 0:
				for (int thCount = 0; thCount < thpPool.GetCount(); thCount++)
				{
					thpPool[thCount].Priority(25);
				}
				break;
			case 1:
				for (int thCount = 0; thCount < thpPool.GetCount(); thCount++)
				{
					thpPool[thCount].Priority(75);
				}
				break;
			case 2:
				for (int thCount = 0; thCount < thpPool.GetCount(); thCount++)
				{
					thpPool[thCount].Priority(125);
				}
				break;
			case 3:
				for (int thCount = 0; thCount < thpPool.GetCount(); thCount++)
				{
					thpPool[thCount].Priority(175);
				}
				break;
			case 4:
				for (int thCount = 0; thCount < thpPool.GetCount(); thCount++)
				{
					thpPool[thCount].Priority(200);
				}
				break;
		}
	};

Add this line to the TabCtrl::Item class:

	const String&  GetText() const 					{ return text; }

------------------------------------------------------------------------------------------------

- Log.cpp: Comment out GetUserNameA calls and OutputDebugString calls;
- App.h: Comment out GetUserName function;
- App.cpp: Comment out GetUserName function;
- ArrayCtrl.h: Move cellInfo variable in to protected;
- Ctrl.iml: Remove networking icon(s).

Copy uppsrc-custom files to designated locations before upp build.
